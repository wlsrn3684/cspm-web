import React, { useEffect, useState } from "react";
import { vlunStyles } from "./styles";
import MaterialTable from "material-table";
import { Button } from "@material-ui/core";
import { useHistory } from "react-router-dom";
import { requestInit } from "../../../constant/requestInit";
import { AWSChecklist } from "../../../constant/checklist";
import Swal from "sweetalert2";
import Modal from "./modal";
import { API_SERVER_URL } from "../../../constant/serverUrl";

interface IVuln {
  id: string;
  assessment_id: string;
  service: string;
  chkIndex: string;
  name: string;
  risk: string;
  date: string;
  status: string;
  summary: any;
  raw_data: any;
}

interface IAccountInfo {
  id: string;
  systemId: string;
  manager: string;
  platform: string;
  type: string;
  name: string;
  accessKey: string;
  secretKey: string;
}

interface IFilter {
  IAM: boolean;
  EC2: boolean;
  S3: boolean;
  RDS: boolean;
  VPC: boolean;
  CloudFront: boolean;
  CloudTrail: boolean;
  CloudWatch: boolean;
  Lambda: boolean;
  EBS: boolean;
  KMS: boolean;
  Cost: boolean;
}

type IFilterType =
  | "IAM"
  | "EC2"
  | "CloudFront"
  | "CloudTrail"
  | "CloudWatch"
  | "S3"
  | "RDS"
  | "Lambda"
  | "EBS"
  | "KMS"
  | "Cost";

export default function Vlun() {
  const classes = vlunStyles();
  const history = useHistory();

  const [vulnList, setVuln] = useState<IVuln[] | undefined>(undefined);
  const [accountList, setAccount] = useState<string[]>([]);
  const [accountInfo, setAccountInfo] = useState<IAccountInfo[]>([]);
  const [modal, setModal] = useState<boolean>(true);
  const [rawData, setRawData] = useState<any>();
  const [isFilter, setFilter] = useState<boolean>(false);
  const [filteredList, setFilteredList] =
    useState<IVuln[] | undefined>(undefined);
  const [filterList, setFilterList] = useState<IFilter>({
    IAM: false,
    EC2: false,
    S3: false,
    RDS: false,
    VPC: false,
    CloudFront: false,
    CloudTrail: false,
    CloudWatch: false,
    Lambda: false,
    EBS: false,
    KMS: false,
    Cost: false,
  });

  const getAccountList = async () => {
    let account_list: string[] = [];

    let response = await fetch(
      `http://localhost:4000/api/asset`,
      requestInit("GET", undefined, true)
    )
      .then((res) => res.json())
      .then((res) => {
        if (res.result === true) {
          if (res.msg === "token is not valid") {
            document.cookie = "token=; expires=Thu, 01 Jan 1999 00:00:10 GMT;";
            localStorage.removeItem("systemId");

            Swal.fire({
              icon: "error",
              title: "로그인 토큰이 만료되었습니다.",
              text: "다시 로그인 해주세요.",
              heightAuto: false,
            }).then(() => {
              window.location.href = "/login";
            });
          } else if (res.msg === "Query is not valid") {
            console.log("Query is not valid");
          } else {
            setAccountInfo(res.accounts);
            res.accounts.map((o: any, idx: number) => {
              account_list.push(o.id);
            });
          }
        }
      });

    setAccount(account_list);
  };

  const getVulnList = async (account_list: string[]) => {
    let vuln_List: IVuln[] = [];

    await account_list.map(async (o: any, idx: number) => {
      await fetch(
        `http://localhost:4000/api/assessment?account_id=${o}`,
        requestInit("GET")
      )
        .then((res) => res.json())
        .then(async (res) => {
          if (res.result === true) {
            await res.assessments.map(async (x: any) => {
              await fetch(
                `http://localhost:4000/api/history/last?assessment_id=${x.id}`,
                requestInit("GET")
              )
                .then((res2) => res2.json())
                .then(async (res2) => {
                  if (res2.result && res2.history) {
                    await fetch(
                      `${API_SERVER_URL}/assessment-results?historyId=${res2.history.id}&result=N`
                    )
                      .then((res3) => res3.json())
                      .then((res3) => {
                        if (Array.isArray(res3)) {
                          res3.map((y: any) => {
                            let name = "";
                            let risk = "";

                            let chk = "";

                            for (
                              let i = 0;
                              i < 3 - String(y.chkIndex).length;
                              i++
                            ) {
                              chk += "0";
                            }

                            for (let check of AWSChecklist) {
                              if (
                                check.index ==
                                `${y.service}_${chk}${y.chkIndex}`
                              ) {
                                name = check.name;
                                risk = check.risk;
                                break;
                              }
                            }

                            let result = "";
                            let qcheck = false;
                            let dqcheck = false;

                            y.rawData.split("").map((o: any) => {
                              if (o == "'") qcheck = !qcheck;
                              if (o == '"' && !qcheck) dqcheck = !dqcheck;

                              if (dqcheck) {
                                result += o;
                              } else if (qcheck) {
                                if (o == '"') {
                                  result += '\\"';
                                } else {
                                  if (o == "'") {
                                    result += '"';
                                  } else {
                                    result += o;
                                  }
                                }
                              } else {
                                if (o == "'") {
                                  result += '"';
                                } else {
                                  result += o;
                                }
                              }
                            });

                            let temp = "";

                            result.split("datetime.datetime(").map((o, idx) => {
                              if (idx % 2 == 1) {
                                let str = o.split(", tzinfo=tzutc())");
                                temp += '"datetime.datetime(';
                                temp += str[0];
                                temp += ', tzinfo=tzutc())"';
                                temp += str[1];
                              } else {
                                temp += o;
                              }
                            });

                            result = temp;

                            vuln_List.push({
                              id: y.id,
                              assessment_id: x.id,
                              service: y.service,
                              chkIndex: y.chkIndex,
                              name: name,
                              risk: risk,
                              date: res2.history.start_date,
                              status: y.history.status,
                              summary: JSON.parse(
                                result
                                  .replace(/True/g, "true")
                                  .replace(/False/g, "false")
                              ).summary,
                              raw_data: result,
                            });
                          });
                        }
                      })
                      .then(() => {
                        setVuln(vuln_List);
                        setFilteredList(vuln_List);
                      });
                  }
                });
            });
          }
        });
    });
  };

  useEffect(() => {
    if (document.cookie === "path=/" || document.cookie === "") {
      Swal.fire({
        icon: "error",
        title: "로그인 에러",
        text: "로그인후에 이용해주세요.",
        heightAuto: false,
      }).then(() => {
        window.location.href = "/login";
        return;
      });
    }

    getAccountList();
  }, []);

  useEffect(() => {
    getVulnList(accountList);
  }, [accountList]);

  useEffect(() => {
    if (
      !filterList.CloudFront &&
      !filterList.CloudTrail &&
      !filterList.CloudWatch &&
      !filterList.Cost &&
      !filterList.EBS &&
      !filterList.EC2 &&
      !filterList.IAM &&
      !filterList.KMS &&
      !filterList.Lambda &&
      !filterList.RDS &&
      !filterList.S3 &&
      !filterList.VPC
    ) {
      setFilteredList(vulnList);
    } else {
      let temp: IVuln[] = [];
      vulnList?.map((o) => {
        if (filterList[o.service as IFilterType]) {
          temp.push(o);
        }
      });
      setFilteredList(temp);
    }
  }, [filterList]);

  return (
    <div className={classes.mainContainer}>
      <div className={classes.header}>
        <div className={classes.headerText}>취약점관리</div>
        <Button
          variant="outlined"
          color="primary"
          className={classes.headerButton}
          onClick={() => {
            history.push("/service/manage/scan");
          }}
        >
          취약점관리
        </Button>
        <Button
          variant="contained"
          color="primary"
          className={classes.headerButton}
          onClick={() => {
            history.push("/service/manage/vlun");
          }}
        >
          취약점현황
        </Button>
        <Button
          variant="outlined"
          color="primary"
          className={classes.headerButton}
          onClick={() => {
            history.push("/service/manage/inspection");
          }}
        >
          이행점검
        </Button>
        <Button
          variant="outlined"
          color="primary"
          className={classes.headerButton}
          onClick={() => {
            history.push("/service/manage/entire");
          }}
        >
          전체점검현황
        </Button>
      </div>

      <div className={classes.content}>
        <div className={classes.contentHeader}></div>
        <div className={classes.tableWrapper}>
          <MaterialTable
            title={
              <div className={classes.title}>
                <Button
                  variant="contained"
                  color="primary"
                  onClick={() => {
                    setFilter(true);
                    setModal(false);
                  }}
                >
                  필터
                </Button>
                <div className={classes.filterWrapper}>
                  {filterList.IAM && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, IAM: false });
                      }}
                    >
                      IAM
                    </div>
                  )}
                  {filterList.EC2 && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, EC2: false });
                      }}
                    >
                      EC2
                    </div>
                  )}
                  {filterList.S3 && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, S3: false });
                      }}
                    >
                      S3
                    </div>
                  )}
                  {filterList.RDS && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, RDS: false });
                      }}
                    >
                      RDS
                    </div>
                  )}
                  {filterList.VPC && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, VPC: false });
                      }}
                    >
                      VPC
                    </div>
                  )}
                  {filterList.CloudFront && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, CloudFront: false });
                      }}
                    >
                      CloudFront
                    </div>
                  )}
                  {filterList.CloudTrail && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, CloudTrail: false });
                      }}
                    >
                      CloudTrail
                    </div>
                  )}
                  {filterList.CloudWatch && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, CloudWatch: false });
                      }}
                    >
                      CloudWatch
                    </div>
                  )}
                  {filterList.Lambda && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, Lambda: false });
                      }}
                    >
                      Lambda
                    </div>
                  )}
                  {filterList.EBS && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, EBS: false });
                      }}
                    >
                      EBS
                    </div>
                  )}
                  {filterList.KMS && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, KMS: false });
                      }}
                    >
                      KMS
                    </div>
                  )}
                  {filterList.Cost && (
                    <div
                      className={classes.filter}
                      onClick={() => {
                        setFilterList({ ...filterList, Cost: false });
                      }}
                    >
                      Cost
                    </div>
                  )}
                </div>
              </div>
            }
            columns={[
              {
                title: "번호",
                field: "id",
                cellStyle: { width: "6%" },
              },
              {
                title: "진단번호",
                field: "assessment_id",
                cellStyle: { width: "7.2%" },
              },
              {
                title: "리스트번호",
                field: "chkIndex",
                cellStyle: { width: "8%" },
                render: (rowData) => {
                  let chk = "";

                  for (
                    let i = 0;
                    i < 3 - String(rowData.chkIndex).length;
                    i++
                  ) {
                    chk += "0";
                  }
                  return (
                    <React.Fragment>{`${rowData.service}_${chk}${rowData.chkIndex}`}</React.Fragment>
                  );
                },
              },
              { title: "항목명", field: "name" },
              { title: "위험도", field: "risk", cellStyle: { width: "6.6%" } },
              {
                title: "진단날짜",
                field: "date",
                cellStyle: { width: "11.6%" },
              },
              {
                title: "요약",
                field: "summary",
                render: (rowData) => {
                  return <div>{rowData.summary}</div>;
                },
              },
              {
                title: "상세보기",
                field: "",
                export: false,
                cellStyle: { width: "8%" },
                render: (rowData) => {
                  return (
                    <Button
                      variant="contained"
                      color="primary"
                      onClick={() => {
                        setRawData(rowData.raw_data);
                        setFilter(false);
                        setModal(false);
                      }}
                    >
                      상세보기
                    </Button>
                  );
                },
              },
            ]}
            data={filteredList as IVuln[]}
            options={{
              exportButton: {
                csv: true,
                pdf: false,
              },
              selection: false,
              exportFileName: "취약점 현황",
              exportAllData: true,
            }}
          />
        </div>
      </div>
      <div
        className={`${classes.overlay} ${modal && classes.visibility}`}
        onClick={() => {
          setModal(true);
        }}
      ></div>
      <Modal
        modal={modal}
        setModal={setModal}
        rawData={rawData}
        isFilter={isFilter}
        setFilterList={setFilterList}
        filterList={filterList}
      />
    </div>
  );
}
